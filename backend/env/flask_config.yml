swagger: '2.0'
info:
  description: backend testing
  version: 1.0.0
  title: flask_backend
  contact:
    email: timothylittleboy@gmail.com
host: 127.0.0.1
basePath: /v1
tags:
  - name: User
    description: user permission etc..
schemes:
  - https
paths:
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: create user
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid username/password supplied
  /login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          required: true
          type: string
        - name: password
          in: query
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ApiResponse'
  /user/{username}:
    get:
      tags:
        - User
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ApiResponse'
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ApiResponse'
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ApiResponse'
definitions:
  User:
    type: object
    properties:
      Account:
        type: string
      Password:
        type: string
      Name:
        type: string
      key:
        type: string
      Add_Date:
        type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
